<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

  <!--======指定整个程序上下文信息，指定spring配置文件位置======-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>

  <!--=======配置监听器=======-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--注册DispatcherServlet，指定springmvc配置文件位置-->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <!--若未指定springmvc的xml所在位置，则以servlet的名字-servlet.xml为名在webapp下面寻找-->
      <param-value>classpath:springmvc.xml</param-value>
    </init-param>
    <!--此参数如果为正数表示一开始就初始化，如果不写或为负数，则等第一次请求来了才开始初始化-->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <!--===servlet映射配置===-->
  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!--===字符编码过滤器一定要放在所有过滤器之前===-->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <!--指定字符编码-->
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceRequestEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>forceResponseEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--=====注册一个支持所有http请求类型的过滤器
           使用rest风格的URL，将普通的post请求转为制定的delete或put请求
           =====-->
  <filter>
    <filter-name>hiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>hiddenHttpMethodFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <!--=====注册一个过滤器，解决ajax不能直接发put请求的问题=====-->
  <filter>
    <filter-name>httpPutFormContentFilter</filter-name>
    <filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>httpPutFormContentFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>



  <welcome-file-list>
    <welcome-file>index_ajax.jsp</welcome-file>
  </welcome-file-list>


</web-app>

        <!--web.xml配置五大核心要点-->
        <!--1.指定spring上下文信息,指定spring.xml文件所在位置-->
        <!--2.注册DispatcherServlet,指定springmvc.xml文件所在位置-->
        <!--3.配置字符编码过滤器-->
        <!--4.配置支持所有http(rest风格)请求的过滤器-->
        <!--5.配置监听器-->
